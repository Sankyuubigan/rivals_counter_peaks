import subprocess
import sys
import logging
import json
from pathlib import Path
from datetime import datetime

class TestRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞."""
    
    def __init__(self):
        self.start_time = datetime.now()
        self.log_file = f'tests/test_run_{self.start_time.strftime("%Y%m%d_%H%M%S")}.log'
        self.results = {}
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(self.log_file),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def run_test_suite(self, test_file: str, description: str, marker: str = None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é pytest."""
        self.logger.info(f"\n{'='*60}\n–ó–ê–ü–£–°–ö: {description} (–§–∞–π–ª: {test_file})\n{'='*60}")
        
        command = [sys.executable, '-m', 'pytest', test_file, '-v', '--tb=short']
        if marker:
            command.extend(['-m', marker])

        try:
            result = subprocess.run(
                command, capture_output=True, text=True, timeout=300
            )
            success = result.returncode == 0 or result.returncode == 5 # 5 = no tests collected
            
            self.results[description] = {
                'success': success,
                'stdout': result.stdout,
                'stderr': result.stderr,
            }
            
            status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
            self.logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {description} -> {status}")
            
            if not success:
                self.logger.error(f"STDOUT:\n{result.stdout}")
                self.logger.error(f"STDERR:\n{result.stderr}")
            
            return success
        except subprocess.TimeoutExpired:
            self.logger.error(f"‚è∞ –¢–ê–ô–ú–ê–£–¢: {description} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 5 –º–∏–Ω—É—Ç.")
            self.results[description] = {'success': False, 'error': 'Timeout'}
            return False
        except Exception as e:
            self.logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {description}: {e}")
            self.results[description] = {'success': False, 'error': str(e)}
            return False

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."""
        self.logger.info(f"\n{'='*60}\n–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n{'='*60}")
        
        total = len(self.results)
        passed = sum(1 for r in self.results.values() if r['success'])
        failed = total - passed
        
        self.logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–æ —Å—å—é—Ç–æ–≤: {total}")
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
        self.logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        
        report_file = f'tests/report_{self.start_time.strftime("%Y%m%d_%H%M%S")}.json'
        report_data = {
            'run_timestamp': self.start_time.isoformat(),
            'summary': {'total': total, 'passed': passed, 'failed': failed},
            'details': self.results
        }
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"–ü–æ–¥—Ä–æ–±–Ω—ã–π JSON-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        return failed == 0

    def run_all(self):
        """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤."""
        test_suites = [
            {'file': 'tests/test_logic.py', 'desc': 'Unit-—Ç–µ—Å—Ç—ã –ª–æ–≥–∏–∫–∏', 'marker': 'not (gui or integration)'},
            {'file': 'tests/test_gui.py', 'desc': 'GUI-—Ç–µ—Å—Ç—ã', 'marker': 'gui'},
            {'file': 'tests/test_integration.py', 'desc': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã', 'marker': 'integration'},
        ]
        
        self.logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Marvel Rivals Counter Picker")
        
        for suite in test_suites:
            if Path(suite['file']).exists():
                self.run_test_suite(suite['file'], suite['desc'], suite['marker'])
            else:
                self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫: {suite['file']}")
                self.results[suite['desc']] = {'success': False, 'error': 'File not found'}
        
        overall_success = self.generate_report()
        
        if overall_success:
            self.logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        else:
            self.logger.error("\nüí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ê–•!")
        
        return overall_success

if __name__ == "__main__":
    runner = TestRunner()
    is_successful = runner.run_all()
    sys.exit(0 if is_successful else 1)
